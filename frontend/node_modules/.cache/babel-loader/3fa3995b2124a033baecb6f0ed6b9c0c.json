{"ast":null,"code":"import { PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"../constants/productConstants\";\nimport axios from 'axios';\n\nconst listProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products\");\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get('/api/products/' + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!product._id) {\n      const {\n        data\n      } = await Axios.post('/api/products', product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/products/' + product._id, product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct };","map":{"version":3,"sources":["C:/WebTechProject/TechieWebTechProject/frontend/src/actions/productActions.js"],"names":["PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","axios","listProducts","dispatch","type","data","get","payload","error","message","detailsProduct","productId","saveProduct","product","getState","PRODUCT_SAVE_REQUEST","userSignin","userInfo","_id","Axios","post","headers","Authorization","token","PRODUCT_SAVE_SUCCESS","put","PRODUCT_SAVE_FAIL"],"mappings":"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","sourcesContent":["import { PRODUCT_DETAILS_FAIL\r\n    , PRODUCT_DETAILS_REQUEST\r\n    , PRODUCT_DETAILS_SUCCESS\r\n    , PRODUCT_LIST_FAIL\r\n    , PRODUCT_LIST_REQUEST\r\n    , PRODUCT_LIST_SUCCESS } from \"../constants/productConstants\"\r\nimport axios from 'axios';\r\nconst listProducts = () => async (dispatch) =>{\r\n    try{\r\n        dispatch({type: PRODUCT_LIST_REQUEST});\r\n        const {data} = await axios.get(\"/api/products\");\r\n        dispatch({type: PRODUCT_LIST_SUCCESS, payload: data})\r\n    }\r\n    catch(error){\r\n        dispatch({type: PRODUCT_LIST_FAIL, payload: error.message })\r\n    }\r\n}\r\n\r\nconst detailsProduct = (productId) => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\r\n      const { data } = await axios.get('/api/products/' + productId);\r\n      dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: PRODUCT_DETAILS_FAIL, payload: error.message });\r\n    }\r\n  };\r\n  const saveProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({ type: PRODUCT_SAVE_REQUEST, payload: product });\r\n      const {\r\n        userSignin: { userInfo },\r\n      } = getState();\r\n      if (!product._id) {\r\n        const { data } = await Axios.post('/api/products', product, {\r\n          headers: {\r\n            Authorization: 'Bearer ' + userInfo.token,\r\n          },\r\n        });\r\n        dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\r\n      } else {\r\n        const { data } = await Axios.put(\r\n          '/api/products/' + product._id,\r\n          product,\r\n          {\r\n            headers: {\r\n              Authorization: 'Bearer ' + userInfo.token,\r\n            },\r\n          }\r\n        );\r\n        dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\r\n      }\r\n    } catch (error) {\r\n      dispatch({ type: PRODUCT_SAVE_FAIL, payload: error.message });\r\n    }\r\n  };\r\nexport {listProducts, detailsProduct}"]},"metadata":{},"sourceType":"module"}