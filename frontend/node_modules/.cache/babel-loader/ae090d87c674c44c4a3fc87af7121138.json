{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGOUT, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from \"../constants/userConstants\"; // const update = ({ userId, name, email, password }) => async (dispatch, getState) => {\n//   const { userSignin: { userInfo } } = getState();\n//   dispatch({ type: USER_UPDATE_REQUEST, payload: { userId, name, email, password } });\n//   try {\n//     const { data } = await Axios.put(\"/api/users/\" + userId,\n//       { name, email, password }, {\n//       headers: {\n//         Authorization: 'Bearer ' + userInfo.token\n//       }\n//     });\n//     dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\n//     Cookie.set('userInfo', JSON.stringify(data));\n//   } catch (error) {\n//     dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\n//   }\n// }\n\nconst login = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_LOGIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/login\", {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n}; // const logout = () => (dispatch) => {\n//   Cookie.remove(\"userInfo\");\n//   dispatch({ type: USER_LOGOUT })\n// }\n\n\nexport { login, register };","map":{"version":3,"sources":["C:/WebTechProject/TechieWebTechProject/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGOUT","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","login","email","password","dispatch","type","payload","data","post","set","JSON","stringify","error","message","register","name"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SACIC,kBADJ,EACwBC,kBADxB,EAEIC,eAFJ,EAEqBC,qBAFrB,EAGIC,qBAHJ,EAG2BC,kBAH3B,EAIIC,WAJJ,EAIiBC,mBAJjB,EAKIC,mBALJ,EAKyBC,gBALzB,QAMO,4BANP,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AACrDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEd,kBAAR;AAA4Be,IAAAA,OAAO,EAAE;AAAEJ,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAArC,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAACmB,IAAN,CAAW,kBAAX,EAA+B;AAAEN,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA/B,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEb,kBAAR;AAA4Bc,MAAAA,OAAO,EAAEC;AAArC,KAAD,CAAR;AACAjB,IAAAA,MAAM,CAACmB,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ,eAAR;AAAyBa,MAAAA,OAAO,EAAEM,KAAK,CAACC;AAAxC,KAAD,CAAR;AACD;AACF,CATD;;AAWA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOb,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAoB;AAC9DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEX,qBAAR;AAA+BY,IAAAA,OAAO,EAAE;AAAES,MAAAA,IAAF;AAAQb,MAAAA,KAAR;AAAeC,MAAAA;AAAf;AAAxC,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAACmB,IAAN,CAAW,qBAAX,EAAkC;AAAEO,MAAAA,IAAF;AAAQb,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAlC,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV,qBAAR;AAA+BW,MAAAA,OAAO,EAAEC;AAAxC,KAAD,CAAR;AACAjB,IAAAA,MAAM,CAACmB,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,kBAAR;AAA4BU,MAAAA,OAAO,EAAEM,KAAK,CAACC;AAA3C,KAAD,CAAR;AACD;AACF,CATD,C,CAWA;AACA;AACA;AACA;;;AACA,SAASZ,KAAT,EAAgBa,QAAhB","sourcesContent":["import Axios from \"axios\";\r\nimport Cookie from 'js-cookie';\r\nimport {\r\n    USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL, USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS, USER_REGISTER_FAIL,\r\n    USER_LOGOUT, USER_UPDATE_REQUEST,  \r\n    USER_UPDATE_SUCCESS, USER_UPDATE_FAIL\r\n} from \"../constants/userConstants\";\r\n\r\n// const update = ({ userId, name, email, password }) => async (dispatch, getState) => {\r\n//   const { userSignin: { userInfo } } = getState();\r\n//   dispatch({ type: USER_UPDATE_REQUEST, payload: { userId, name, email, password } });\r\n//   try {\r\n//     const { data } = await Axios.put(\"/api/users/\" + userId,\r\n//       { name, email, password }, {\r\n//       headers: {\r\n//         Authorization: 'Bearer ' + userInfo.token\r\n//       }\r\n//     });\r\n//     dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\r\n//     Cookie.set('userInfo', JSON.stringify(data));\r\n//   } catch (error) {\r\n//     dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\r\n//   }\r\n// }\r\n\r\nconst login = (email, password) => async (dispatch) => {\r\n  dispatch({ type: USER_LOGIN_REQUEST, payload: { email, password } });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/users/login\", { email, password });\r\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n    Cookie.set('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({ type: USER_LOGIN_FAIL, payload: error.message });\r\n  }\r\n}\r\n\r\nconst register = (name, email, password) => async (dispatch) => {\r\n  dispatch({ type: USER_REGISTER_REQUEST, payload: { name, email, password } });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/users/register\", { name, email, password });\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n    Cookie.set('userInfo', JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\r\n  }\r\n}\r\n\r\n// const logout = () => (dispatch) => {\r\n//   Cookie.remove(\"userInfo\");\r\n//   dispatch({ type: USER_LOGOUT })\r\n// }\r\nexport { login, register };"]},"metadata":{},"sourceType":"module"}